{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/Project/ReactDoc/nlp_frontend/src/pages/Master/Nilai.js\";\nimport React, { useRef, useState, useEffect } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { withStyles } from '@material-ui/core/styles';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport MaterialTable from 'material-table';\nimport Paper from '@material-ui/core/Paper';\nimport { Wrapper } from '../../components';\nimport axios from 'axios';\nimport Alert from '@material-ui/lab/Alert';\nconst api = axios.create({\n  baseURL: 'http://localhost:8000'\n});\n\nfunction Nilai() {\n  const [state, setState] = useState([]);\n  const [mahasiswa, setMahasiswa] = useState([]);\n  const [frekuensi, setFrekuensi] = useState([]);\n  const [semester, setSemester] = useState([]); //for error handling\n\n  const [iserror, setIserror] = useState(false);\n  const [errorMessages, setErrorMessages] = useState([]);\n\n  const refreshTable = () => {\n    const fetchData = async () => {\n      const nilai = await api.get('nilai_all');\n      setState(nilai.data);\n      const frekuensi = await api.get('freq_all');\n      setFrekuensi(frekuensi.data);\n      const mahasiswa = await api.get('mahasiswa_all');\n      setMahasiswa(mahasiswa.data);\n    };\n\n    fetchData();\n  };\n\n  useEffect(() => {\n    refreshTable();\n  }, []); //Operation Add\n\n  const handleRowAdd = (newData, resolve) => {\n    var mahasiswa_new = {};\n    let errorList = [];\n\n    if (newData.nilai === undefined) {\n      errorList.push(\"Harap Isi Nilai\");\n    } else {\n      mahasiswa_new['nilai'] = newData.nilai;\n    }\n\n    if (newData.id_mahasiswa === undefined) {\n      errorList.push(\"Harap Pilih Mahasiswa\");\n    } else {\n      mahasiswa_new['id_mahasiswa'] = newData.id_mahasiswa.id;\n    }\n\n    if (newData.id_freq === undefined) {\n      errorList.push(\"Harap Pilih Frekuensi\");\n    } else {\n      mahasiswa_new['id_freq'] = newData.id_freq.id;\n    }\n\n    console.log(mahasiswa_new);\n\n    if (errorList.length < 1) {\n      api.post(\"nilai_add\", mahasiswa_new).then(res => {\n        let dataToAdd = state;\n        dataToAdd.push(newData);\n        setState(dataToAdd);\n        resolve();\n        setErrorMessages([]);\n        setIserror(false);\n        refreshTable();\n      }).catch(error => {\n        setErrorMessages([\"Cannot add data. Server error!\"]);\n        setIserror(true);\n        resolve();\n      });\n    } else {\n      setErrorMessages(errorList);\n      setIserror(true);\n      resolve();\n    }\n  };\n\n  const handleRowUpdate = (newData, oldData, resolve) => {\n    var mahasiswa_new = {};\n    let errorList = [];\n\n    if (newData.nilai === undefined) {\n      errorList.push(\"Harap Isi Nilai\");\n    } else {\n      mahasiswa_new['nilai'] = newData.nilai;\n    }\n\n    if (newData.id_mahasiswa === undefined) {\n      errorList.push(\"Harap Pilih Mahasiswa\");\n    } else {\n      mahasiswa_new['id_mahasiswa'] = newData.id_mahasiswa.id;\n    }\n\n    if (newData.id_freq === undefined) {\n      errorList.push(\"Harap Pilih Frekuensi\");\n    } else {\n      mahasiswa_new['id_freq'] = newData.id_freq.id;\n    } //console.log(mahasiswa_new);\n\n\n    if (errorList.length < 1) {\n      api.patch(\"/nilai_operation/\" + newData.id, mahasiswa_new).then(res => {\n        const dataUpdate = [...state];\n        const index = oldData.tableData.id;\n        dataUpdate[index] = newData;\n        setState([...dataUpdate]);\n        resolve();\n        setIserror(false);\n        setErrorMessages([]);\n        refreshTable();\n      }).catch(error => {\n        setErrorMessages([\"Update failed! Server error\"]);\n        setIserror(true);\n        resolve();\n      });\n    } else {\n      setErrorMessages(errorList);\n      setIserror(true);\n      resolve();\n    }\n  };\n\n  const handleRowDelete = (oldData, resolve) => {\n    api.delete('nilai_operation/' + oldData.id).then(res => {\n      const dataDelete = [...state];\n      const index = oldData.tableData.id;\n      dataDelete.splice(index, 1);\n      setState([...dataDelete]);\n      resolve();\n      refreshTable();\n    }).catch(error => {\n      setErrorMessages([\"Delete failed! Server error\"]);\n      setIserror(true);\n      resolve();\n    });\n  };\n\n  var objMahasiswa = mahasiswa.reduce(function (acc, cur, i) {\n    acc[cur.id] = cur.nama;\n    return acc;\n  }, {});\n  var objFrekuensi = frekuensi.reduce(function (acc, cur, i) {\n    acc[cur.id] = cur.frekuensi;\n    return acc;\n  }, {});\n  var objSemester = semester.reduce(function (acc, cur, i) {\n    acc[cur.id] = cur.semester;\n    return acc;\n  }, {});\n  var columns = [{\n    title: 'Nama',\n    field: 'id_mahasiswa.id',\n    lookup: objMahasiswa\n  }, {\n    title: 'Frekuensi',\n    field: 'id_freq.id',\n    lookup: objFrekuensi\n  }, {\n    title: 'Praktikum',\n    field: 'id_freq.praktikum'\n  }, {\n    title: 'Nilai',\n    field: 'nilai',\n    type: 'text'\n  }, {\n    title: 'semester',\n    field: 'id_freq.semester',\n    lookup: {\n      ganjil: 'ganjil',\n      genap: 'genap'\n    }\n  }, {\n    title: 'tahun ajaran',\n    field: 'thn_ajaran',\n    type: 'text'\n  } // {\n  //   title: 'Birth Place',\n  //   field: 'birthCity',\n  //   lookup: { 34: 'İstanbul', 63: 'Şanlıurfa' },\n  // },\n  ];\n  return /*#__PURE__*/React.createElement(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 15\n    }\n  }, \"Data Mahasiswa\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 15\n    }\n  }, iserror && /*#__PURE__*/React.createElement(Alert, {\n    severity: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 19\n    }\n  }, errorMessages.map((msg, i) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 34\n      }\n    }, msg);\n  }))), /*#__PURE__*/React.createElement(MaterialTable, {\n    title: \"Tabel Nilai\",\n    columns: columns,\n    data: state,\n    editable: {\n      onRowAdd: newData => new Promise(resolve => {\n        setTimeout(() => {\n          console.log(newData);\n          handleRowAdd(newData, resolve);\n        }, 600);\n      }),\n      onRowUpdate: (newData, oldData) => new Promise(resolve => {\n        setTimeout(() => {\n          handleRowUpdate(newData, oldData, resolve);\n          resolve(); // if (oldData) {\n          //   setState((prevState) => {\n          //     const data = [...prevState.data];\n          //     data[data.indexOf(oldData)] = newData;\n          //     return { ...prevState, data };\n          //   });\n          // }\n        }, 600);\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          setState(prevState => {\n            handleRowDelete(oldData, resolve);\n          });\n        }, 600);\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 15\n    }\n  }))));\n}\n\nexport default Nilai;","map":{"version":3,"sources":["/Users/mac/Documents/Project/ReactDoc/nlp_frontend/src/pages/Master/Nilai.js"],"names":["React","useRef","useState","useEffect","Card","CardContent","withStyles","Divider","Grid","MaterialTable","Paper","Wrapper","axios","Alert","api","create","baseURL","Nilai","state","setState","mahasiswa","setMahasiswa","frekuensi","setFrekuensi","semester","setSemester","iserror","setIserror","errorMessages","setErrorMessages","refreshTable","fetchData","nilai","get","data","handleRowAdd","newData","resolve","mahasiswa_new","errorList","undefined","push","id_mahasiswa","id","id_freq","console","log","length","post","then","res","dataToAdd","catch","error","handleRowUpdate","oldData","patch","dataUpdate","index","tableData","handleRowDelete","delete","dataDelete","splice","objMahasiswa","reduce","acc","cur","i","nama","objFrekuensi","objSemester","columns","title","field","lookup","type","ganjil","genap","map","msg","onRowAdd","Promise","setTimeout","onRowUpdate","onRowDelete","prevState"],"mappings":"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","sourcesContent":["import React ,{ useRef, useState , useEffect } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { withStyles  } from '@material-ui/core/styles';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport MaterialTable from 'material-table';\nimport Paper from '@material-ui/core/Paper';\nimport { Wrapper } from '../../components';\nimport axios from 'axios';\nimport Alert from '@material-ui/lab/Alert';\n\nconst api = axios.create({\n  baseURL: 'http://localhost:8000'\n});\n\n\nfunction Nilai(){\n  const [state, setState] = useState([]);\n  const [mahasiswa, setMahasiswa] = useState([]);\n  const [frekuensi, setFrekuensi] = useState([]);\n  const [semester, setSemester] = useState([]);\n  //for error handling\n  const [iserror, setIserror] = useState(false);\n  const [errorMessages, setErrorMessages] = useState([]);\n\n  const refreshTable = () => {\n    const fetchData = async () => {\n      const nilai = await api.get('nilai_all')\n      setState(nilai.data);\n      const frekuensi = await api.get('freq_all')\n      setFrekuensi(frekuensi.data);\n      const mahasiswa = await api.get('mahasiswa_all')\n      setMahasiswa(mahasiswa.data);\n    };\n    fetchData();\n  }\n  useEffect(() => {\n    refreshTable();\n  }, []);\n\n\n  //Operation Add\n\n  const handleRowAdd = (newData,resolve) => {\n    var mahasiswa_new = {};\n    let errorList = [];\n    if(newData.nilai === undefined){\n      errorList.push(\"Harap Isi Nilai\");\n    }else{\n      mahasiswa_new['nilai'] = newData.nilai;\n    }\n    if(newData.id_mahasiswa === undefined){\n      errorList.push(\"Harap Pilih Mahasiswa\");\n    }else{\n      mahasiswa_new['id_mahasiswa'] = newData.id_mahasiswa.id;\n    }\n    if(newData.id_freq === undefined){\n      errorList.push(\"Harap Pilih Frekuensi\");\n    }else{\n      mahasiswa_new['id_freq'] = newData.id_freq.id;\n    }\n    console.log(mahasiswa_new);\n    if(errorList.length < 1){\n        api.post(\"nilai_add\",mahasiswa_new).\n        then(res => {\n          let dataToAdd = state;\n          dataToAdd.push(newData);\n          setState(dataToAdd);\n          resolve()\n          setErrorMessages([])\n          setIserror(false)\n          refreshTable();\n        })\n        .catch(error => {\n          setErrorMessages([\"Cannot add data. Server error!\"])\n          setIserror(true)\n          resolve()\n        })\n      }else{\n        setErrorMessages(errorList)\n        setIserror(true)\n        resolve()\n      }\n    }\n\n\n    const handleRowUpdate = (newData, oldData, resolve) => {\n      var mahasiswa_new = {};\n      let errorList = [];\n      if(newData.nilai === undefined){\n        errorList.push(\"Harap Isi Nilai\");\n      }else{\n        mahasiswa_new['nilai'] = newData.nilai;\n      }\n      if(newData.id_mahasiswa === undefined){\n        errorList.push(\"Harap Pilih Mahasiswa\");\n      }else{\n        mahasiswa_new['id_mahasiswa'] = newData.id_mahasiswa.id;\n      }\n      if(newData.id_freq === undefined){\n        errorList.push(\"Harap Pilih Frekuensi\");\n      }else{\n        mahasiswa_new['id_freq'] = newData.id_freq.id;\n      }\n      //console.log(mahasiswa_new);\n        if(errorList.length < 1){\n          api.patch(\"/nilai_operation/\"+newData.id, mahasiswa_new)\n          .then(res => {\n            const dataUpdate = [...state];\n            const index = oldData.tableData.id;\n            dataUpdate[index] = newData;\n            setState([...dataUpdate]);\n            resolve()\n            setIserror(false)\n            setErrorMessages([])\n            refreshTable();\n          })\n          .catch(error => {\n            setErrorMessages([\"Update failed! Server error\"])\n            setIserror(true)\n            resolve()\n\n          })\n        }else{\n          setErrorMessages(errorList)\n          setIserror(true)\n          resolve()\n        }\n    }\n  const handleRowDelete = (oldData, resolve) => {\n    api.delete('nilai_operation/'+oldData.id)\n    .then(res => {\n      const dataDelete = [...state];\n        const index = oldData.tableData.id;\n        dataDelete.splice(index, 1);\n        setState([...dataDelete]);\n        resolve()\n        refreshTable();\n      })\n      .catch(error => {\n        setErrorMessages([\"Delete failed! Server error\"])\n        setIserror(true)\n        resolve()\n      })\n  }\n\n  var objMahasiswa = mahasiswa.reduce(function(acc, cur, i) {\n    acc[cur.id] = cur.nama;\n    return acc;\n  }, {});\n\n  var objFrekuensi = frekuensi.reduce(function(acc, cur, i) {\n    acc[cur.id] = cur.frekuensi;\n    return acc;\n  }, {});\n\n  var objSemester = semester.reduce(function(acc, cur, i) {\n    acc[cur.id] = cur.semester;\n    return acc;\n  }, {});\n\n  var columns = [\n    {\n      title: 'Nama',\n      field: 'id_mahasiswa.id',\n      lookup : objMahasiswa\n    },\n    {\n      title: 'Frekuensi',\n      field: 'id_freq.id',\n      lookup : objFrekuensi\n    },\n    {\n      title: 'Praktikum',\n      field: 'id_freq.praktikum',\n    },\n    { title: 'Nilai', field: 'nilai', type: 'text' },\n    { title: 'semester',\n      field: 'id_freq.semester',\n      lookup : {\n        ganjil : 'ganjil',\n        genap  : 'genap'\n      }\n    },\n    { title: 'tahun ajaran', field: 'thn_ajaran', type: 'text' },\n    // {\n    //   title: 'Birth Place',\n    //   field: 'birthCity',\n    //   lookup: { 34: 'İstanbul', 63: 'Şanlıurfa' },\n    // },\n  ];\n\n  return(\n    <Wrapper>\n      <Card>\n          <CardContent>\n              <h3>Data Mahasiswa</h3>\n              <div>\n                {iserror &&\n                  <Alert severity=\"error\">\n                      {errorMessages.map((msg, i) => {\n                          return <div key={i}>{msg}</div>\n                      })}\n                  </Alert>\n                }\n              </div>\n              <MaterialTable\n              title=\"Tabel Nilai\"\n              columns={columns}\n              data={state}\n              editable={{\n                onRowAdd: (newData) =>\n                  new Promise((resolve) => {\n                    setTimeout(() => {\n                      console.log(newData);\n                      handleRowAdd(newData, resolve)\n                    }, 600);\n                  }),\n                onRowUpdate: (newData, oldData) =>\n                  new Promise((resolve) => {\n                    setTimeout(() => {\n\n                      handleRowUpdate(newData, oldData, resolve)\n                      resolve();\n                      // if (oldData) {\n                      //   setState((prevState) => {\n                      //     const data = [...prevState.data];\n                      //     data[data.indexOf(oldData)] = newData;\n                      //     return { ...prevState, data };\n                      //   });\n                      // }\n                    }, 600);\n                  }),\n                onRowDelete: (oldData) =>\n                  new Promise((resolve) => {\n                    setTimeout(() => {\n                      resolve();\n                      setState((prevState) => {\n                        handleRowDelete(oldData, resolve)\n                      });\n                    }, 600);\n                  }),\n                }\n              }\n            />\n          </CardContent>\n      </Card>\n    </Wrapper>\n  );\n}\n\n\nexport default Nilai;\n"]},"metadata":{},"sourceType":"module"}